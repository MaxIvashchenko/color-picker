{"version":3,"sources":["components/ColorsPopUp.jsx","components/RGBBPopUp.jsx","lib/converter.js","components/Errors.jsx","components/ColorPicker.jsx","index.js"],"names":["ColorsPopUp","colors","getColor","activeColor","className","map","color","i","key","name","onClick","style","background","r","g","b","RGBBPopUp","props","showPrevColor","showColorRGB","numRcolor","numGcolor","numBcolor","handleInputChange","getPrevColor","setColor","RGB","value","item","htmlFor","onChange","e","target","type","min","max","rgbToHex","x","hex","toString","length","join","Errors","errorLength","errorValue","getInstanceColorValue","zIndex","ColorPicker","useState","setActiveColor","showColorsList","setShowColorsList","setShowColorRGB","setNumRcolor","setNumGcolor","setNumBcolor","setShowPrevColor","setErrorLength","setErrorValue","setValue","showPopup","blockName","handleChange","rgbValue","result","exec","parseInt","hexToRgb","inputName","num","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d1bd436.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function ColorsPopUp({ colors,  getColor,activeColor }) {\n\n  \n\n    return (\n        <div className='colorsPopUp'>\n\n            {colors.map((color, i) => {\n                return (\n                    <button key={'popUp-' + color.name} onClick={() => getColor(i)} className={`color ${i === activeColor ? 'isActiveColor' : ''}`}>\n                        <p className='colorName'>{color.name}</p>\n                        <span style={{ background: `rgb(${color.r},${color.g},${color.b})` }} className='colorView'></span>\n                    </button>\n                )\n            })}\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function RGBBPopUp(props) {\n\n\n    const { showPrevColor, showColorRGB, numRcolor, numGcolor, numBcolor, handleInputChange, getPrevColor,setColor } = props\n    const RGB = [\n        { name: 'R', value: numRcolor },\n        { name: 'G', value: numGcolor },\n        { name: 'B', value: numBcolor },\n    ]\n\n    return (\n\n        <div className={showColorRGB ? 'RGBBPopUp' : 'RGBBPopUphide'}>\n\n            {RGB.map((item, i) => {\n                return (\n                    <div key={`${item.name}-colorBox-key`} className={`${item.name}-colorBox inputs`}  >\n                        <label htmlFor={`${item.name}-colorBox`}>{item.name}</label>\n                        <input onChange={(e) => handleInputChange(item.name, +e.target.value)} type=\"range\" value={item.value} min={0} max={250} />\n                    </div>\n                )\n            })}\n\n            <div className=\"buttons\">\n                <button onClick={() => getPrevColor(...showPrevColor)} className=\"buttonCancel\">Cancel</button>\n                <button onClick={() => setColor()} className=\"buttonSubmit\">Ok</button>\n            </div>\n\n        </div>\n    )\n}\n","export function rgbToHex(r, g, b) {\n    return '#' + [r, g, b].map(x => {\n        const hex = x.toString(16)\n        return hex.length === 1 ? '0' + hex : hex\n    }).join('')\n}\n\nexport function hexToRgb(hex) {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? [+parseInt(result[1], 16), +parseInt(result[2], 16), +parseInt(result[3], 16)] : null;\n}","import React from 'react'\n\nexport default function Errors({errorLength, errorValue, getInstanceColorValue}) {\n    return (\n        <>\n              {  errorLength && <div className='errorInput'>HEX value is not correct</div>}\n            {  errorValue && <div className='errorInput'>This HEX value doesn't exist</div>}\n            {  (errorValue || errorLength) && <button className=\"errorBtn\" style={{ zIndex: 8 }} onClick={() => getInstanceColorValue()}>click here to get instance color value</button>}\n        </>\n    )\n}\n","import React, { useState } from 'react'\nimport './ColorPicker.css'\nimport ColorsPopUp from './ColorsPopUp'\nimport RGBBPopUp from './RGBBPopUp'\nimport { rgbToHex, hexToRgb } from '../lib/converter'\nimport Errors from './Errors'\n\nexport default function ColorPicker() {\n    const colors = [\n        { name: \"red\", r: 255, g: 0, b: 0 },\n        { name: \"yellow\", r: 255, g: 255, b: 0 },\n        { name: \"green\", r: 0, g: 128, b: 0 },\n        { name: \"blue\", r: 54, g: 127, b: 209 },\n    ]\n\n    const [activeColor, setActiveColor] = useState(0)\n    const [showColorsList, setShowColorsList] = useState(false)\n    const [showColorRGB, setShowColorRGB] = useState(false)\n    const [numRcolor, setNumRcolor] = useState(colors[activeColor].r)\n    const [numGcolor, setNumGcolor] = useState(colors[activeColor].g)\n    const [numBcolor, setNumBcolor] = useState(colors[activeColor].b)\n    const [showPrevColor, setShowPrevColor] = useState([numRcolor, numGcolor, numBcolor])\n\n    const [errorLength, setErrorLength] = useState(false)\n    const [errorValue, setErrorValue] = useState(false)\n\n    const [value, setValue] = useState(rgbToHex(...showPrevColor)) // hexValue\n\n    function handleInputChange(inputName, num) {\n        switch (inputName) {\n            case 'R':\n                setNumRcolor(num)\n                break;\n            case 'G':\n                setNumGcolor(num)\n                break;\n            case 'B':\n                setNumBcolor(num)\n                break;\n            default:\n                return null\n        }\n    }\n\n    function getColor(i) {\n        const { r, g, b } = colors[i]\n        setNumRcolor(r)\n        setNumGcolor(g)\n        setNumBcolor(b)\n        setActiveColor(i)\n        setShowPrevColor([r, g, b])\n        setValue(rgbToHex(r, g, b))\n        setShowColorsList(false)\n        setErrorValue(false)\n        setErrorLength(false)\n    }\n\n    function setColor() {\n        setShowPrevColor([numRcolor, numGcolor, numBcolor])\n        setValue(rgbToHex(numRcolor, numGcolor, numBcolor))\n        setShowColorRGB(false)\n        setErrorLength(false)\n        setErrorValue(false)\n    }\n\n    function showPopup(blockName) {\n        switch (blockName) {\n            case 'colorsPopUp':\n                setShowColorsList(!showColorsList)\n                setShowColorRGB(false)\n                break;\n            case 'RGBBPopUp':\n                setShowColorRGB(!showColorRGB)\n                setShowColorsList(false)\n                setShowPrevColor([numRcolor, numGcolor, numBcolor])\n                break;\n            default:\n                setShowColorsList(false)\n                setShowColorRGB(false)\n                getPrevColor(...showPrevColor)\n        }\n    }\n\n    function getPrevColor(r, g, b) {\n        setNumRcolor(r)\n        setNumGcolor(g)\n        setNumBcolor(b)\n        setShowColorRGB(false)\n    }\n\n    const handleChange = e => {\n        const value = e.target.value;\n        setValue(value)\n        const rgbValue = hexToRgb(value)\n\n        if (value.length < 7) {\n            setErrorLength(false)\n            setErrorValue(false)\n        }\n        else if (value.length === 7) {\n            if (rgbValue !== null) {\n                setNumRcolor(rgbValue[0])\n                setNumGcolor(rgbValue[1])\n                setNumBcolor(rgbValue[2])\n                setShowPrevColor([+rgbValue[0], +rgbValue[1], +rgbValue[2]])\n            } else {\n                setErrorValue(true)\n            }\n            setErrorLength(false)\n            setErrorValue(false)\n\n        } else {\n            setErrorLength(true)\n            setErrorValue(true)\n        }\n    }\n\n    function getInstanceColorValue() {\n        setValue(rgbToHex(...showPrevColor))\n        setErrorLength(false)\n        setErrorValue(false)\n    }\n\n    return (\n        <div className='colorPicker'>\n\n            <button onClick={() => showPopup()} className='wrapper'></button>\n\n            <div className='form'>\n                <input value={value} onChange={(e) => handleChange(e)} type='text' />\n\n                <div className='activeColorBlock'>\n                    <button onClick={() => showPopup('colorsPopUp')} className='activeColor' style={{ background: `${rgbToHex(numRcolor, numGcolor, numBcolor)}` }}></button>\n                    {showColorsList &&\n                        <ColorsPopUp\n                            colors={colors}\n                            setActiveColor={setActiveColor}\n                            getColor={getColor}\n                        />\n                    }\n                </div>\n                <div className='RGBBlock'>\n                    <button className={`RGBBtn ${showColorRGB && 'activeRGBBtn'}`} onClick={() => showPopup('RGBBPopUp')}></button>\n\n                    <RGBBPopUp\n                        showPrevColor={showPrevColor}\n                        showColorRGB={showColorRGB}\n                        numRcolor={numRcolor}\n                        numGcolor={numGcolor}\n                        numBcolor={numBcolor}\n                        handleInputChange={handleInputChange}\n                        getPrevColor={getPrevColor}\n                        setColor={setColor}\n                    />\n\n                </div>\n            </div>\n            <Errors errorLength={errorLength} errorValue={errorValue} getInstanceColorValue={getInstanceColorValue} />\n        </div>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ColorPicker from './components/ColorPicker';\nimport './index.css';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorPicker />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}